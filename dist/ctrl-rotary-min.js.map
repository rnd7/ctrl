{"version":3,"sources":["rotary.js"],"names":["TAU","Math","PI","HALF_PI","mod","a","n","calcAngle","ax","ay","bx","by","angle","atan2","calcAngleDelta","current","target","b","clamp","val","min","max","x","y","outer","inner","start","end","ctx","beginPath","arc","ROTARY_DEFAULTS","observeSize","sizeFromParent","speed","value","disabled","drawTorusSegment","closePath","stepGap","trackSize","trackSector","mouseSector","valueSector","targetSector","Rotary","neutralAngle","opts","this","_canvas","document","createElement","borderRadius","tabIndex","borderColor","style","outline","borderFocusColor","userSelect","backgroundColor","getContext","steps","_target","_mouseX","_mouseY","_mouseAngle","startDrag","bind","stopDrag","drag","trackSectorColor","focus","valueSectorColor","addEventListener","_bound","targetSectorColor","blur","e","_disabled","_dragging","removeEventListener","Object","_evalMousePosition","_focus","redraw","_len","arguments","length","Array","_key","apply","_len2","args","_key2","_len4","_key4","_parent","_width","offsetWidth","fillStyle","offsetHeight","_redraw","_loop","_mouseSector","_centerY","_mouseSectorColor","appendChild","fitParent","touches","pageX","_selector","pageY","offsetLeft","_canvasSize","offsetTop","zero","_attachDomElement","inverse","_trackSector","_valueSector","dispatchEvent","CustomEvent","bubbles","detail","_this","_animationFrame","_value","window","requestAnimationFrame","render","_steps","_speed","_neutralAngle","_dispatchChangeEvent","_observeSize","_sizeFromParent","_height","_draw","_ctx","cx","_centerX","cy","border","_borderRadius","_radius","_trackSize","limit","delta","canvas","width","height","clearRect","save","_borderFocusColor","_borderColor","clip","fill","restore","_backgroundColor","_targetSector","_trackSectorColor","_stepGap","_valueSectorColor","segmentSector","stepScale","i","_targetSectorColor","_resizeCanvas"],"mappings":"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","file":"ctrl-rotary-min.js","sourcesContent":["\nconst TAU = Math.PI * 2\nconst HALF_PI = Math.PI / 2\n\nfunction mod( a, n ) { return ( a % n + n ) % n }\n\nfunction calcAngle(ax, ay, bx, by) {\n  var angle = Math.atan2(by - ay, bx - ax)\n  if ( angle < 0 ) angle += TAU\n  return angle\n}\n\nfunction calcAngleDelta( current, target ) {\n  var a = mod( ( current - target ), TAU )\n  var b = mod( ( target - current ), TAU)\n  return a < b ? -a : b\n}\n\nfunction clamp(val, min, max) {\n  return Math.min(max || 1, Math.max(min || 0, val))\n}\n\nfunction drawTorusSegment(ctx, x, y, outer, inner, start, end) {\n  start = start || 0\n  end = end || TAU\n  ctx.beginPath()\n  ctx.arc(x, y, outer, start , end, false)\n  ctx.arc(x, y, inner, end, start, true)\n  ctx.closePath()\n}\n\nexport const ROTARY_DEFAULTS = {\n  observeSize: false, // poll for parent size changes\n  sizeFromParent: true, // fit within parent bounds\n  speed: .01, // value per frame\n  value: 0., // 0-1\n  disabled: false, // non interactive\n  neutralAngle: -HALF_PI, // track orientation\n  borderRadius: 2,\n  borderColor: 'rgb(12,12,12)',\n  borderFocusColor: 'rgb(0,0,80)',\n  backgroundColor: 'rgb(36,36,36)',\n  steps: 0, // 2-n to specify steps\n  stepGap: TAU / 360, // stepper only. gap between segments\n  trackSize: 12, // width of the track\n  trackSector: TAU * .8, // track span as circular sector\n  trackSectorColor: 'rgb(66,66,66)',\n  mouseSector: TAU / 12, // size of mouse indicator\n  mouseSectorColor: 'rgba(170,170,255,.5)',\n  valueSector: TAU / 48, // size of value indicator\n  valueSectorColor: 'rgb(255,255,255)',\n  targetSector: TAU / 48, // size of target indicator\n  targetSectorColor: 'rgba(170,170,255,.5)',\n}\n\nexport class Rotary {\n  constructor(opts) {\n    this._canvas = document.createElement('CANVAS')\n    this._canvas.tabIndex = 0\n    this._canvas.style.outline = 0\n    this._canvas.style.userSelect = \"none\"\n    this._ctx = this._canvas.getContext(\"2d\")\n    this._target = null\n    this._mouseX = 0.\n    this._mouseY = 0.\n    this._mouseAngle = 0.\n    this._bound = {\n      startDrag: this.startDrag.bind(this),\n      stopDrag: this.stopDrag.bind(this),\n      drag: this.drag.bind(this),\n      focus: this.focus.bind(this),\n      blur: this.blur.bind(this)\n    }\n\n    Object.assign(this, ROTARY_DEFAULTS, opts)\n\n    if (this.target === null) this.target = this.value // if no target use value\n\n    this._canvas.addEventListener(\"mousedown\", this._bound.startDrag)\n    this._canvas.addEventListener(\"focus\", this._bound.focus, true)\n    this._canvas.addEventListener(\"blur\", this._bound.blur, true)\n  }\n\n  startDrag(e) {\n    if (this._disabled) return\n    this._dragging = true\n    this._canvas.removeEventListener(\"mousedown\", this._bound.startDrag)\n    this._canvas.removeEventListener(\"touchstart\", this._bound.startDrag)\n    document.addEventListener(\"mousemove\", this._bound.drag)\n    document.addEventListener(\"touchmove\", this._bound.drag)\n    document.addEventListener(\"mouseup\", this._bound.stopDrag)\n    document.addEventListener(\"mouseleave\", this._bound.stopDrag)\n    document.addEventListener(\"dragleave\", this._bound.stopDrag)\n    document.addEventListener(\"touchcancel\", this._bound.stopDrag)\n    document.addEventListener(\"touchend\", this._bound.stopDrag)\n    this._evalMousePosition(e)\n  }\n\n  drag(e) {\n    if (this._disabled) return\n    this._evalMousePosition(e)\n  }\n\n  stopDrag(e) {\n    if (this._disabled) return\n    this._dragging = false\n    document.removeEventListener(\"mousemove\", this._bound.drag)\n    document.removeEventListener(\"touchmove\", this._bound.drag)\n    document.removeEventListener(\"mouseup\", this._bound.stopDrag)\n    document.removeEventListener(\"mouseleave\", this._bound.stopDrag)\n    document.removeEventListener(\"dragleave\", this._bound.stopDrag)\n    document.removeEventListener(\"touchcancel\", this._bound.stopDrag)\n    document.removeEventListener(\"touchend\", this._bound.stopDrag)\n    this._canvas.addEventListener(\"mousedown\", this._bound.startDrag)\n    this._canvas.addEventListener(\"touchstart\", this._bound.startDrag)\n    this._evalMousePosition(e)\n  }\n\n  focus(e) {\n    if (this._disabled) return\n    this._focus = true\n    this.redraw()\n  }\n\n  blur(e) {\n    if (this._disabled) return\n    this._focus = false\n    this.redraw()\n  }\n\n  on(...args) {\n    this._canvas.addEventListener.apply(this._canvas, args)\n  }\n\n  addEventListener(...args) {\n    this._canvas.addEventListener.apply(this._canvas, args)\n  }\n\n  off(...args) {\n    this._canvas.removeEventListener.apply(this._canvas, args)\n  }\n\n  removeEventListener(...args) {\n    this._canvas.removeEventListener.apply(this._canvas, args)\n  }\n\n  set selector(val) {\n    this._selector = val\n    this.parent = document.querySelector(this._selector)\n  }\n  get selector() {\n    return this._selector\n  }\n\n  set parent(val) {\n    this._parent = val\n    this._attachDomElement()\n  }\n  get parent() {\n    return this._parent\n  }\n\n  set value(val) {\n    if (this._value == val) return\n    this._value = clamp(val)\n    this.redraw()\n  }\n  get value() {\n    return this._value\n  }\n\n  set trackSector(val) {\n    if (this._trackSector == val) return\n    this._trackSector = val\n    this.redraw()\n  }\n  get trackSector() {\n    return this._trackSector\n  }\n\n  set target(val) {\n    if (this._target == val) return\n    this._target = clamp(val)\n    this.redraw()\n  }\n  get target() {\n    return this._target\n  }\n\n  set steps(val) {\n    if (this._steps == val) return\n    this._steps = val\n    this.redraw()\n  }\n  get steps() {\n    return this._steps\n  }\n\n  set neutralAngle(val) {\n    if (this._neutralAngle == val) return\n    this._neutralAngle = val\n    this.redraw()\n  }\n  get neutralAngle() {\n    return this._neutralAngle\n  }\n\n  set sizeFromParent(val) {\n    if (this._sizeFromParent == val) return\n    this._sizeFromParent = val\n    if (this._sizeFromParent) this.fitParent()\n  }\n  get sizeFromParent() {\n    return this._sizeFromParent\n  }\n\n  set width(val) {\n    if (this._width == val) return\n    this._width = val\n    this._resizeCanvas()\n  }\n  get width() {\n    return this._width\n  }\n\n  set height(val) {\n    if (this._height == val) return\n    this._height = val\n    this._resizeCanvas()\n  }\n  get height() {\n    return this._height\n  }\n\n  set speed(val) {\n    if (this._speed == val) return\n    this._speed = val\n  }\n  get speed() {\n    return this._speed\n  }\n\n  set mouseSector(val) {\n    if (this._mouseSector == val) return\n    this._mouseSector = val\n    this.redraw()\n  }\n  get mouseSector() {\n    return this._mouseSector\n  }\n\n  set targetSector(val) {\n    if (this._targetSector == val) return\n    this._targetSector = val\n    this.redraw()\n  }\n  get targetSector() {\n    return this._targetSector\n  }\n\n  set valueSector(val) {\n    if (this._valueSector == val) return\n    this._valueSector = val\n    this.redraw()\n  }\n  get valueSector() {\n    return this._valueSector\n  }\n\n  set stepGap(val) {\n    if (this._stepGap == val) return\n    this._stepGap = val\n    this.redraw()\n  }\n  get stepGap() {\n    return this._stepGap\n  }\n\n  set disabled(val) {\n    if (this._disabled == val) return\n    this._disabled = val\n    if (this._disabled && this._dragging) this.stopDrag()\n    if (this._disabled && this._focus) this.blur()\n    this.redraw()\n  }\n  get disabled() {\n    return this._disabled\n  }\n\n  set observeSize(val) {\n    if (this._observeSize == val) return\n    this._observeSize = val\n    if (this._observeSize) this._loop()\n  }\n  get observeSize() {\n    return observeSize\n  }\n\n  set borderRadius(val) {\n    if (this._borderRadius == val) return\n    this._borderRadius = val\n    this.redraw()\n  }\n  get borderRadius() {\n    return this._borderRadius\n  }\n\n  set trackSize(val) {\n    if (this._trackSize == val) return\n    this._trackSize = val\n    this.redraw()\n  }\n  get trackSize() {\n    return this._trackSize\n  }\n\n  set valueSectorColor(val) {\n    if (this._valueSectorColor == val) return\n    this._valueSectorColor = val\n    this.redraw()\n  }\n  get valueSectorColor() {\n    return this._valueSectorColor\n  }\n\n  set trackSectorColor(val) {\n    if (this._trackSectorColor == val) return\n    this._trackSectorColor = val\n    this.redraw()\n  }\n  get trackSectorColor() {\n    return this._trackSectorColor\n  }\n\n  set mouseSectorColor(val) {\n    if (this._mouseSectorColor == val) return\n    this._mouseSectorColor = val\n    this.redraw()\n  }\n  get mouseSectorColor() {\n    return this._mouseSectorColor\n  }\n\n  set borderColor(val) {\n    if (this._borderColor == val) return\n    this._borderColor = val\n    this.redraw()\n  }\n  get borderColor() {\n    return this._borderColor\n  }\n\n  set borderFocusColor(val) {\n    if (this._borderFocusColor == val) return\n    this._borderFocusColor = val\n    this.redraw()\n  }\n  get borderFocusColor() {\n    return this._borderFocusColor\n  }\n\n  set backgroundColor(val) {\n    if (this._backgroundColor == val) return\n    this._backgroundColor = val\n    this.redraw()\n  }\n  get backgroundColor() {\n    return this._backgroundColor\n  }\n\n  set targetSectorColor(val) {\n    if (this._targetSectorColor == val) return\n    this._targetSectorColor = val\n    this.redraw()\n  }\n  get targetSectorColor() {\n    return this._targetSectorColor\n  }\n\n  get domElement() {\n    return this._canvas\n  }\n\n  fitParent() {\n    if (!this._parent) return\n    this._width = this._parent.offsetWidth\n    this._height =  this._parent.offsetHeight\n    this._resizeCanvas()\n  }\n\n  redraw() {\n    this._redraw = true\n    this._loop()\n  }\n\n  _resizeCanvas() {\n    this._canvasSize = Math.min(this._width, this._height)\n    this._radius =  this._canvasSize / 2.\n    this._centerX = this._centerY = this._radius\n    this.redraw()\n  }\n\n  _attachDomElement() {\n    if (this.parent && this._canvas) {\n      this._parent.appendChild(this._canvas)\n      this.fitParent()\n      this.redraw()\n    }\n  }\n\n  _evalMousePosition(e){\n    this._mouseX = e.touches ? e.touches[0].pageX : e.pageX\n    this._mouseY = e.touches ? e.touches[0].pageY : e.pageY\n    this._mouseAngle = calcAngle(\n      this._canvas.offsetLeft + this._canvasSize / 2,\n      this._canvas.offsetTop + this._canvasSize / 2,\n      this._mouseX,\n      this._mouseY\n    )\n    const zero = (this._neutralAngle - Math.PI)\n    const inverse = (TAU - (this._trackSector - this._valueSector)) / TAU\n    const fullCircle = mod(this._mouseAngle - zero, TAU) / TAU\n    const value = fullCircle\n      * (TAU / (this._trackSector - this._valueSector))\n      - (inverse + this._valueSector / 2) / 2\n\n    this._target = clamp(value)\n    this.redraw()\n  }\n\n  _dispatchChangeEvent() {\n    this._canvas.dispatchEvent(\n      new CustomEvent(\n        'change',\n        {\n          bubbles: true,\n          detail: {\n            value: this._value,\n            component: this\n          }\n        }\n      )\n    )\n  }\n\n  _loop() {\n    if (\n      this._animationFrame\n      || (\n        !this._observeSize\n        && !this._dragging\n        && !this._redraw\n        && this._value == this._target\n      )\n    ) return\n    this._animationFrame = window.requestAnimationFrame(() => {\n      let render = this._dragging || this._redraw\n      if (this._value != this._target) {\n        if (this.speed <= 0) {\n          // speed lte 0 just set value\n          this._value = this._target\n        } else {\n          if (this._value + this._speed <= this._target ) {\n            this._value += this._speed\n          } else if (this._value- this._speed >= this._target ) {\n            this._value -= this._speed\n          } else {\n            this._value = this._target\n          }\n        }\n        render = true\n        this._dispatchChangeEvent()\n      }\n      if (\n        this._observeSize\n        && this._sizeFromParent\n        && (\n          this._parent.offsetWidth != this._width\n          || this._parent.offsetHeight != this._height\n        )\n      ) {\n        this.fitParent()\n        render = true\n      }\n      this._animationFrame = null\n      if (render) this._draw()\n      this._loop()\n    })\n  }\n\n  _draw() {\n    const ctx = this._ctx\n    const cx = this._centerX\n    const cy = this._centerY\n    const border = this._borderRadius\n    const trackSize = Math.min(this._radius/3, this._trackSize)\n    const zero = -this._trackSector/2 + this._neutralAngle\n    const limit = zero + this._trackSector\n    const delta = calcAngleDelta( zero,limit)\n    const target = this._target\n    const value = this._value\n\n    const outer = this._radius - border\n    const inner = this._radius - border - trackSize\n\n    if (\n      ctx.canvas.width != this._canvasSize\n      || ctx.canvas.height != this._canvasSize\n    ) {\n      ctx.canvas.width = ctx.canvas.height = this._canvasSize\n    } else {\n      ctx.clearRect(0, 0, this._canvasSize, this._canvasSize)\n    }\n\n\n\n    // background torus\n    ctx.save()\n    ctx.beginPath()\n    ctx.fillStyle = this._focus ? this._borderFocusColor : this._borderColor\n    ctx.arc(cx, cy, this._radius, 0, TAU)\n    ctx.arc(cx, cy, inner - border, 0, TAU, true)\n    ctx.clip()\n    ctx.fill()\n    ctx.restore()\n\n    // torus\n    ctx.fillStyle = this._backgroundColor\n    drawTorusSegment(ctx, cx, cy, outer, inner)\n    ctx.fill()\n\n    let start, end\n    if (this._steps < 2) {\n\n      // track\n      ctx.fillStyle = this._trackSectorColor\n      drawTorusSegment(ctx, cx, cy, outer, inner, zero, limit)\n      ctx.fill()\n\n      // target value indicator\n      if (value != target) {\n        start = target *((TAU + delta - this._targetSector)) + zero\n        end = start + this._targetSector\n        ctx.fillStyle = this._targetSectorColor\n        drawTorusSegment(ctx, cx, cy, outer, inner, start, end)\n        ctx.fill()\n      }\n\n      // current value indicator\n      start = value * (TAU + delta - this._valueSector) + zero\n      end = start + this._valueSector\n      ctx.fillStyle = this._valueSectorColor\n      drawTorusSegment(ctx, cx, cy, outer, inner, start, end)\n      ctx.fill()\n\n    } else {\n\n      const segmentSector = this._trackSector / this._steps\n      const stepScale = 1 / this._steps\n\n      // draw segment for every step\n      for (let i = 0; i < this._steps; i++) {\n        start = mod(zero + segmentSector * i, TAU) + this._stepGap\n        end = mod(zero + segmentSector * (i + 1), TAU) - this._stepGap\n        // segmented track\n        ctx.fillStyle = this._trackSectorColor\n        drawTorusSegment(ctx, cx, cy, outer, inner, start, end)\n        ctx.fill()\n        if (value >= i * stepScale && value <= (i + 1) * stepScale) {\n          // segment matches current value\n          ctx.fillStyle = this._valueSectorColor\n          drawTorusSegment(ctx, cx, cy, outer, inner, start, end)\n          ctx.fill()\n        } else if (value != target) {\n          if (target >= i * stepScale && target <= (i + 1) * stepScale) {\n            // current value neq target value segement matches selected step\n            ctx.fillStyle = this._targetSectorColor\n            drawTorusSegment(ctx, cx, cy, outer, inner, start, end)\n            ctx.fill()\n          }\n        }\n      }\n    }\n    if (this._dragging) {\n      // show mouse angle while dragging\n      start = this._mouseAngle - this._mouseSector / 2\n      end = this._mouseAngle + this._mouseSector / 2\n      ctx.fillStyle = this._mouseSectorColor\n      drawTorusSegment(ctx, cx, cy, outer, inner, start, end)\n      ctx.fill()\n    }\n    this._redraw = false\n  }\n}\n"]}