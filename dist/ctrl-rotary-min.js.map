{"version":3,"sources":["rotary.js"],"names":["TAU","Math","PI","HALF_PI","mod","a","n","calcAngle","ax","ay","bx","by","angle","atan2","calcAngleDelta","current","target","b","clamp","val","min","max","x","y","outer","inner","start","end","ctx","beginPath","arc","ROTARY_DEFAULTS","observeSize","sizeFromParent","speed","value","disabled","drawTorusSegment","closePath","stepGap","trackSize","trackSector","valueSector","targetSector","Rotary","opts","_classCallCheck","this","_canvas","document","createElement","neutralAngle","style","outline","borderRadius","userSelect","borderColor","getContext","borderFocusColor","backgroundColor","steps","_mouseY","_mouseAngle","_bound","startDrag","bind","stopDrag","drag","focus","blur","Object","assign","targetSectorColor","addEventListener","e","_disabled","_dragging","removeEventListener","_target","_mouseX","_evalMousePosition","_focus","redraw","_len","arguments","length","Array","_key","apply","args","_len2","_key2","_len3","_key3","_len4","_key4","segmentSector","_width","stepScale","_parent","offsetWidth","_height","offsetHeight","_resizeCanvas","fillStyle","_canvasSize","_valueSectorColor","_radius","cx","touches","pageX","pageY","offsetLeft","offsetTop","_selector","parent","zero","_neutralAngle","inverse","_trackSector","_valueSector","dispatchEvent","CustomEvent","bubbles","_value","detail","component","_this","_observeSize","_redraw","_animationFrame","requestAnimationFrame","render","_speed","_steps","_dispatchChangeEvent","fitParent","_sizeFromParent","_ctx","_centerX","cy","_centerY","border","_trackSize","limit","delta","canvas","height","clearRect","save","_borderFocusColor","_borderColor","clip","fill","restore","_targetSector","_backgroundColor","_trackSectorColor","_targetSectorColor","_stepGap","i","_borderRadius","_attachDomElement","fullCircle","_loop"],"mappings":"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","file":"ctrl-rotary-min.js","sourcesContent":["\nconst TAU = Math.PI * 2\nconst HALF_PI = Math.PI / 2\n\nfunction mod( a, n ) { return ( a % n + n ) % n }\n\nfunction calcAngle(ax, ay, bx, by) {\n  var angle = Math.atan2(by - ay, bx - ax)\n  if ( angle < 0 ) angle += TAU\n  return angle\n}\n\nfunction calcAngleDelta( current, target ) {\n  var a = mod( ( current - target ), TAU )\n  var b = mod( ( target - current ), TAU)\n  return a < b ? -a : b\n}\n\nfunction clamp(val, min, max) {\n  return Math.min(max || 1, Math.max(min || 0, val))\n}\n\nfunction drawTorusSegment(ctx, x, y, outer, inner, start, end) {\n  start = start || 0\n  end = end || TAU\n  ctx.beginPath()\n  ctx.arc(x, y, outer, start , end, false)\n  ctx.arc(x, y, inner, end, start, true)\n  ctx.closePath()\n}\n\nexport const ROTARY_DEFAULTS = {\n  observeSize: false, // poll for parent size changes\n  sizeFromParent: true, // fit within parent bounds\n  speed: .01, // value per frame\n  value: 0., // 0-1\n  disabled: false, // non interactive\n  neutralAngle: -HALF_PI, // track orientation\n  borderRadius: 2,\n  borderColor: 'rgb(12,12,12)',\n  borderFocusColor: 'rgb(0,0,80)',\n  backgroundColor: 'rgb(36,36,36)',\n  steps: 0, // 2-n to specify steps\n  stepGap: TAU / 360, // stepper only. gap between segments\n  trackSize: 12, // width of the track\n  trackSector: TAU * .8, // track span as circular sector\n  trackSectorColor: 'rgb(66,66,66)',\n  valueSector: TAU / 48, // size of value indicator\n  valueSectorColor: 'rgb(255,255,255)',\n  targetSector: TAU / 48, // size of target indicator\n  targetSectorColor: 'rgba(170,170,255,.5)',\n}\n\nexport class Rotary {\n  constructor(opts) {\n    this._canvas = document.createElement('CANVAS')\n    this._canvas.tabIndex = 0\n    this._canvas.style.outline = 0\n    this._canvas.style.userSelect = \"none\"\n    this._ctx = this._canvas.getContext(\"2d\")\n    this._target = null\n    this._mouseX = 0.\n    this._mouseY = 0.\n    this._mouseAngle = 0.\n    this._bound = {\n      startDrag: this.startDrag.bind(this),\n      stopDrag: this.stopDrag.bind(this),\n      drag: this.drag.bind(this),\n      focus: this.focus.bind(this),\n      blur: this.blur.bind(this)\n    }\n\n    Object.assign(this, ROTARY_DEFAULTS, opts)\n\n    if (this.target === null) this.target = this.value // if no target use value\n\n    this._canvas.addEventListener(\"mousedown\", this._bound.startDrag)\n    this._canvas.addEventListener(\"focus\", this._bound.focus, true)\n    this._canvas.addEventListener(\"blur\", this._bound.blur, true)\n  }\n\n  startDrag(e) {\n    if (this._disabled) return\n    this._dragging = true\n    this._canvas.removeEventListener(\"mousedown\", this._bound.startDrag)\n    this._canvas.removeEventListener(\"touchstart\", this._bound.startDrag)\n    document.addEventListener(\"mousemove\", this._bound.drag)\n    document.addEventListener(\"touchmove\", this._bound.drag)\n    document.addEventListener(\"mouseup\", this._bound.stopDrag)\n    document.addEventListener(\"mouseleave\", this._bound.stopDrag)\n    document.addEventListener(\"dragleave\", this._bound.stopDrag)\n    document.addEventListener(\"touchcancel\", this._bound.stopDrag)\n    document.addEventListener(\"touchend\", this._bound.stopDrag)\n    this._evalMousePosition(e)\n  }\n\n  drag(e) {\n    if (this._disabled) return\n    this._evalMousePosition(e)\n  }\n\n  stopDrag(e) {\n    if (this._disabled) return\n    this._dragging = false\n    document.removeEventListener(\"mousemove\", this._bound.drag)\n    document.removeEventListener(\"touchmove\", this._bound.drag)\n    document.removeEventListener(\"mouseup\", this._bound.stopDrag)\n    document.removeEventListener(\"mouseleave\", this._bound.stopDrag)\n    document.removeEventListener(\"dragleave\", this._bound.stopDrag)\n    document.removeEventListener(\"touchcancel\", this._bound.stopDrag)\n    document.removeEventListener(\"touchend\", this._bound.stopDrag)\n    this._canvas.addEventListener(\"mousedown\", this._bound.startDrag)\n    this._canvas.addEventListener(\"touchstart\", this._bound.startDrag)\n    this._evalMousePosition(e)\n  }\n\n  focus(e) {\n    if (this._disabled) return\n    this._focus = true\n    this.redraw()\n  }\n\n  blur(e) {\n    if (this._disabled) return\n    this._focus = false\n    this.redraw()\n  }\n\n  on(...args) {\n    this._canvas.addEventListener.apply(this._canvas, args)\n  }\n\n  addEventListener(...args) {\n    this._canvas.addEventListener.apply(this._canvas, args)\n  }\n\n  off(...args) {\n    this._canvas.removeEventListener.apply(this._canvas, args)\n  }\n\n  removeEventListener(...args) {\n    this._canvas.removeEventListener.apply(this._canvas, args)\n  }\n\n  set selector(val) {\n    this._selector = val\n    this.parent = document.querySelector(this._selector)\n  }\n  get selector() {\n    return this._selector\n  }\n\n  set parent(val) {\n    this._parent = val\n    this._attachDomElement()\n  }\n  get parent() {\n    return this._parent\n  }\n\n  set value(val) {\n    if (this._value == val) return\n    this._value = clamp(val)\n    this.redraw()\n  }\n  get value() {\n    return this._value\n  }\n\n  set trackSector(val) {\n    if (this._trackSector == val) return\n    this._trackSector = val\n    this.redraw()\n  }\n  get trackSector() {\n    return this._trackSector\n  }\n\n  set target(val) {\n    if (this._target == val) return\n    this._target = clamp(val)\n    this.redraw()\n  }\n  get target() {\n    return this._target\n  }\n\n  set steps(val) {\n    if (this._steps == val) return\n    this._steps = val\n    this.redraw()\n  }\n  get steps() {\n    return this._steps\n  }\n\n  set neutralAngle(val) {\n    if (this._neutralAngle == val) return\n    this._neutralAngle = val\n    this.redraw()\n  }\n  get neutralAngle() {\n    return this._neutralAngle\n  }\n\n  set sizeFromParent(val) {\n    if (this._sizeFromParent == val) return\n    this._sizeFromParent = val\n    if (this._sizeFromParent) this.fitParent()\n  }\n  get sizeFromParent() {\n    return this._sizeFromParent\n  }\n\n  set width(val) {\n    if (this._width == val) return\n    this._width = val\n    this._resizeCanvas()\n  }\n  get width() {\n    return this._width\n  }\n\n  set height(val) {\n    if (this._height == val) return\n    this._height = val\n    this._resizeCanvas()\n  }\n  get height() {\n    return this._height\n  }\n\n  set speed(val) {\n    if (this._speed == val) return\n    this._speed = val\n  }\n  get speed() {\n    return this._speed\n  }\n\n  set targetSector(val) {\n    if (this._targetSector == val) return\n    this._targetSector = val\n    this.redraw()\n  }\n  get targetSector() {\n    return this._targetSector\n  }\n\n  set valueSector(val) {\n    if (this._valueSector == val) return\n    this._valueSector = val\n    this.redraw()\n  }\n  get valueSector() {\n    return this._valueSector\n  }\n\n  set stepGap(val) {\n    if (this._stepGap == val) return\n    this._stepGap = val\n    this.redraw()\n  }\n  get stepGap() {\n    return this._stepGap\n  }\n\n  set disabled(val) {\n    if (this._disabled == val) return\n    this._disabled = val\n    if (this._disabled && this._dragging) this.stopDrag()\n    if (this._disabled && this._focus) this.blur()\n    this.redraw()\n  }\n  get disabled() {\n    return this._disabled\n  }\n\n  set observeSize(val) {\n    if (this._observeSize == val) return\n    this._observeSize = val\n    if (this._observeSize) this._loop()\n  }\n  get observeSize() {\n    return observeSize\n  }\n\n  set borderRadius(val) {\n    if (this._borderRadius == val) return\n    this._borderRadius = val\n    this.redraw()\n  }\n  get borderRadius() {\n    return this._borderRadius\n  }\n\n  set trackSize(val) {\n    if (this._trackSize == val) return\n    this._trackSize = val\n    this.redraw()\n  }\n  get trackSize() {\n    return this._trackSize\n  }\n\n  set valueSectorColor(val) {\n    if (this._valueSectorColor == val) return\n    this._valueSectorColor = val\n    this.redraw()\n  }\n  get valueSectorColor() {\n    return this._valueSectorColor\n  }\n\n  set trackSectorColor(val) {\n    if (this._trackSectorColor == val) return\n    this._trackSectorColor = val\n    this.redraw()\n  }\n  get trackSectorColor() {\n    return this._trackSectorColor\n  }\n\n  set borderColor(val) {\n    if (this._borderColor == val) return\n    this._borderColor = val\n    this.redraw()\n  }\n  get borderColor() {\n    return this._borderColor\n  }\n\n  set borderFocusColor(val) {\n    if (this._borderFocusColor == val) return\n    this._borderFocusColor = val\n    this.redraw()\n  }\n  get borderFocusColor() {\n    return this._borderFocusColor\n  }\n\n  set backgroundColor(val) {\n    if (this._backgroundColor == val) return\n    this._backgroundColor = val\n    this.redraw()\n  }\n  get backgroundColor() {\n    return this._backgroundColor\n  }\n\n  set targetSectorColor(val) {\n    if (this._targetSectorColor == val) return\n    this._targetSectorColor = val\n    this.redraw()\n  }\n  get targetSectorColor() {\n    return this._targetSectorColor\n  }\n\n  get domElement() {\n    return this._canvas\n  }\n\n  fitParent() {\n    if (!this._parent) return\n    this._width = this._parent.offsetWidth\n    this._height =  this._parent.offsetHeight\n    this._resizeCanvas()\n  }\n\n  redraw() {\n    this._redraw = true\n    this._loop()\n  }\n\n  _resizeCanvas() {\n    this._canvasSize = Math.min(this._width, this._height)\n    this._radius =  this._canvasSize / 2.\n    this._centerX = this._centerY = this._radius\n    this.redraw()\n  }\n\n  _attachDomElement() {\n    if (this.parent && this._canvas) {\n      this._parent.appendChild(this._canvas)\n      this.fitParent()\n      this.redraw()\n    }\n  }\n\n  _evalMousePosition(e){\n    this._mouseX = e.touches ? e.touches[0].pageX : e.pageX\n    this._mouseY = e.touches ? e.touches[0].pageY : e.pageY\n    this._mouseAngle = calcAngle(\n      this._canvas.offsetLeft + this._canvasSize / 2,\n      this._canvas.offsetTop + this._canvasSize / 2,\n      this._mouseX,\n      this._mouseY\n    )\n    const zero = (this._neutralAngle - Math.PI)\n    const inverse = (TAU - (this._trackSector - this._valueSector)) / TAU\n    const fullCircle = mod(this._mouseAngle - zero, TAU) / TAU\n    const value = fullCircle\n      * (TAU / (this._trackSector - this._valueSector))\n      - (inverse + this._valueSector / 2) / 2\n\n    this._target = clamp(value)\n    this.redraw()\n  }\n\n  _dispatchChangeEvent() {\n    this._canvas.dispatchEvent(\n      new CustomEvent(\n        'change',\n        {\n          bubbles: true,\n          detail: {\n            value: this._value,\n            component: this\n          }\n        }\n      )\n    )\n  }\n\n  _loop() {\n    if (\n      this._animationFrame\n      || (\n        !this._observeSize\n        && !this._dragging\n        && !this._redraw\n        && this._value == this._target\n      )\n    ) return\n    this._animationFrame = window.requestAnimationFrame(() => {\n      let render = this._dragging || this._redraw\n      if (this._value != this._target) {\n        if (this.speed <= 0) {\n          // speed lte 0 just set value\n          this._value = this._target\n        } else {\n          if (this._value + this._speed <= this._target ) {\n            this._value += this._speed\n          } else if (this._value- this._speed >= this._target ) {\n            this._value -= this._speed\n          } else {\n            this._value = this._target\n          }\n        }\n        render = true\n        this._dispatchChangeEvent()\n      }\n      if (\n        this._observeSize\n        && this._sizeFromParent\n        && (\n          this._parent.offsetWidth != this._width\n          || this._parent.offsetHeight != this._height\n        )\n      ) {\n        this.fitParent()\n        render = true\n      }\n      this._animationFrame = null\n      if (render) this._draw()\n      this._loop()\n    })\n  }\n\n  _draw() {\n    const ctx = this._ctx\n    const cx = this._centerX\n    const cy = this._centerY\n    const border = this._borderRadius\n    const trackSize = Math.min(this._radius/3, this._trackSize)\n    const zero = -this._trackSector/2 + this._neutralAngle\n    const limit = zero + this._trackSector\n    const delta = calcAngleDelta( zero,limit)\n    const target = this._target\n    const value = this._value\n\n    const outer = this._radius - border\n    const inner = this._radius - border - trackSize\n\n    if (\n      ctx.canvas.width != this._canvasSize\n      || ctx.canvas.height != this._canvasSize\n    ) {\n      ctx.canvas.width = ctx.canvas.height = this._canvasSize\n    } else {\n      ctx.clearRect(0, 0, this._canvasSize, this._canvasSize)\n    }\n\n\n\n    // background torus\n    ctx.save()\n    ctx.beginPath()\n    ctx.fillStyle = this._focus ? this._borderFocusColor : this._borderColor\n    ctx.arc(cx, cy, this._radius, 0, TAU)\n    ctx.arc(cx, cy, inner - border, 0, TAU, true)\n    ctx.clip()\n    ctx.fill()\n    ctx.restore()\n\n    // torus\n    ctx.fillStyle = this._backgroundColor\n    drawTorusSegment(ctx, cx, cy, outer, inner)\n    ctx.fill()\n\n    let start, end\n    if (this._steps < 2) {\n\n      // track\n      ctx.fillStyle = this._trackSectorColor\n      drawTorusSegment(ctx, cx, cy, outer, inner, zero, limit)\n      ctx.fill()\n\n      // target value indicator\n      if (value != target) {\n        start = target *((TAU + delta - this._targetSector)) + zero\n        end = start + this._targetSector\n        ctx.fillStyle = this._targetSectorColor\n        drawTorusSegment(ctx, cx, cy, outer, inner, start, end)\n        ctx.fill()\n      }\n\n      // current value indicator\n      start = value * (TAU + delta - this._valueSector) + zero\n      end = start + this._valueSector\n      ctx.fillStyle = this._valueSectorColor\n      drawTorusSegment(ctx, cx, cy, outer, inner, start, end)\n      ctx.fill()\n\n    } else {\n\n      const segmentSector = this._trackSector / this._steps\n      const stepScale = 1 / this._steps\n\n      // draw segment for every step\n      for (let i = 0; i < this._steps; i++) {\n        start = mod(zero + segmentSector * i, TAU) + this._stepGap\n        end = mod(zero + segmentSector * (i + 1), TAU) - this._stepGap\n        // segmented track\n        ctx.fillStyle = this._trackSectorColor\n        drawTorusSegment(ctx, cx, cy, outer, inner, start, end)\n        ctx.fill()\n        if (value >= i * stepScale && value <= (i + 1) * stepScale) {\n          // segment matches current value\n          ctx.fillStyle = this._valueSectorColor\n          drawTorusSegment(ctx, cx, cy, outer, inner, start, end)\n          ctx.fill()\n        } else if (value != target) {\n          if (target >= i * stepScale && target <= (i + 1) * stepScale) {\n            // current value neq target value segement matches selected step\n            ctx.fillStyle = this._targetSectorColor\n            drawTorusSegment(ctx, cx, cy, outer, inner, start, end)\n            ctx.fill()\n          }\n        }\n      }\n    }\n    this._redraw = false\n  }\n}\n"]}