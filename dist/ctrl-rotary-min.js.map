{"version":3,"sources":["rotary.js"],"names":["TAU","Math","PI","HALF_PI","mod","a","n","calcAngle","ax","ay","bx","by","angle","atan2","calcAngleDelta","current","target","b","clamp","val","min","max","x","y","outer","inner","start","end","ctx","beginPath","arc","VALUE","TARGET","STEP","drawTorusSegment","eventMode","speed","value","disabled","neutralAngle","borderRadius","borderColor","borderFocusColor","backgroundColor","steps","stepGap","trackSize","trackSector","trackSectorColor","valueSector","valueSectorColor","targetSector","targetSectorColor","Rotary","ROTARY_DEFAULTS","_classCallCheck","this","observeSize","document","createElement","_canvas","tabIndex","sizeFromParent","style","outline","userSelect","getContext","_target","_mouseX","_mouseY","_mouseAngle","_bound","startDrag","bind","stopDrag","focus","blur","opts","addEventListener","_disabled","_dragging","drag","_evalMousePosition","e","_ctx","removeEventListener","Object","redraw","_focus","_len","arguments","length","args","Array","_key","_len2","_key2","apply","_len4","_key4","fillStyle","cx","_parent","offsetHeight","_resizeCanvas","_redraw","cy","_canvasSize","_centerX","_centerY","_radius","appendChild","fitParent","touches","pageX","pageY","offsetLeft","offsetTop","zero","inverse","_trackSector","_valueSector","_eventMode","_selector","_lastEventValue","_value","_lastEventTarget","_lastEventStep","step","COMPLETE","dispatchEvent","CustomEvent","bubbles","detail","component","_this","_observeSize","_animationFrame","requestAnimationFrame","render","_speed","_steps","_dispatchChangeEvent","_width","_height","_neutralAngle","_draw","_loop","_sizeFromParent","border","_trackSize","limit","delta","canvas","height","width","clearRect","save","_borderFocusColor","_borderColor","clip","fill","restore","_backgroundColor","_targetSector","_targetSectorColor","_valueSectorColor","segmentSector","stepScale","i","_stepGap","_trackSectorColor","parent","querySelector","floor","offsetWidth","fullCircle","_borderRadius"],"mappings":"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","file":"ctrl-rotary-min.js","sourcesContent":["\nconst TAU = Math.PI * 2\nconst HALF_PI = Math.PI / 2\n\nfunction mod( a, n ) { return ( a % n + n ) % n }\n\nfunction calcAngle(ax, ay, bx, by) {\n  var angle = Math.atan2(by - ay, bx - ax)\n  if ( angle < 0 ) angle += TAU\n  return angle\n}\n\nfunction calcAngleDelta( current, target ) {\n  var a = mod( ( current - target ), TAU )\n  var b = mod( ( target - current ), TAU)\n  return a < b ? -a : b\n}\n\nfunction clamp(val, min, max) {\n  return Math.min(max || 1, Math.max(min || 0, val))\n}\n\nfunction drawTorusSegment(ctx, x, y, outer, inner, start, end) {\n  start = start || 0\n  end = end || TAU\n  ctx.beginPath()\n  ctx.arc(x, y, outer, start , end, false)\n  ctx.arc(x, y, inner, end, start, true)\n  ctx.closePath()\n}\n\n// Event Modes\nexport const NONE = \"none\" // no events fired\nexport const VALUE = \"value\" // only on value changes\nexport const TARGET = \"target\" // only on target changes\nexport const STEP = \"step\" // only on step changes\nexport const COMPLETE = \"complete\" // only when value reaches target\nexport const ALWAYS = \"always\" // while user interacts\n\n\nexport const ROTARY_DEFAULTS = {\n  observeSize: false, // poll for parent size changes\n  sizeFromParent: true, // fit within parent bounds\n  eventMode: VALUE, // online fire events when value changed\n  speed: .01, // value per frame 0 and 1 eq instant change\n  value: 0., // 0-1\n  disabled: false, // non interactive\n  neutralAngle: -HALF_PI, // track orientation\n  borderRadius: 2,\n  borderColor: 'rgb(12,12,12)',\n  borderFocusColor: 'rgb(0,0,80)',\n  backgroundColor: 'rgb(36,36,36)',\n  steps: 1, // 1-n to specify steps 1 is continous\n  stepGap: TAU / 360, // stepper only. gap between segments\n  trackSize: 12, // width of the track\n  trackSector: TAU * .8, // track span as circular sector\n  trackSectorColor: 'rgb(66,66,66)',\n  valueSector: TAU / 48, // size of value indicator\n  valueSectorColor: 'rgb(255,255,255)',\n  targetSector: TAU / 48, // size of target indicator\n  targetSectorColor: 'rgba(170,170,255,.5)',\n}\n\nexport class Rotary {\n  constructor(opts) {\n    this._canvas = document.createElement('CANVAS')\n    this._canvas.tabIndex = 0\n    this._canvas.style.outline = 0\n    this._canvas.style.userSelect = \"none\"\n    this._ctx = this._canvas.getContext(\"2d\")\n    this._target = null\n    this._mouseX = 0.\n    this._mouseY = 0.\n    this._mouseAngle = 0.\n    this._bound = {\n      startDrag: this.startDrag.bind(this),\n      stopDrag: this.stopDrag.bind(this),\n      drag: this.drag.bind(this),\n      focus: this.focus.bind(this),\n      blur: this.blur.bind(this)\n    }\n\n    Object.assign(this, ROTARY_DEFAULTS, opts)\n\n    if (this.target === null) this.target = this.value // if no target use value\n\n    this._canvas.addEventListener(\"mousedown\", this._bound.startDrag)\n    this._canvas.addEventListener(\"focus\", this._bound.focus, true)\n    this._canvas.addEventListener(\"blur\", this._bound.blur, true)\n  }\n\n  startDrag(e) {\n    if (this._disabled) return\n    this._dragging = true\n    this._canvas.removeEventListener(\"mousedown\", this._bound.startDrag)\n    this._canvas.removeEventListener(\"touchstart\", this._bound.startDrag)\n    document.addEventListener(\"mousemove\", this._bound.drag)\n    document.addEventListener(\"touchmove\", this._bound.drag)\n    document.addEventListener(\"mouseup\", this._bound.stopDrag)\n    document.addEventListener(\"mouseleave\", this._bound.stopDrag)\n    document.addEventListener(\"dragleave\", this._bound.stopDrag)\n    document.addEventListener(\"touchcancel\", this._bound.stopDrag)\n    document.addEventListener(\"touchend\", this._bound.stopDrag)\n    this._evalMousePosition(e)\n  }\n\n  drag(e) {\n    if (this._disabled) return\n    this._evalMousePosition(e)\n  }\n\n  stopDrag(e) {\n    if (this._disabled) return\n    this._dragging = false\n    document.removeEventListener(\"mousemove\", this._bound.drag)\n    document.removeEventListener(\"touchmove\", this._bound.drag)\n    document.removeEventListener(\"mouseup\", this._bound.stopDrag)\n    document.removeEventListener(\"mouseleave\", this._bound.stopDrag)\n    document.removeEventListener(\"dragleave\", this._bound.stopDrag)\n    document.removeEventListener(\"touchcancel\", this._bound.stopDrag)\n    document.removeEventListener(\"touchend\", this._bound.stopDrag)\n    this._canvas.addEventListener(\"mousedown\", this._bound.startDrag)\n    this._canvas.addEventListener(\"touchstart\", this._bound.startDrag)\n    this._evalMousePosition(e)\n  }\n\n  focus(e) {\n    if (this._disabled) return\n    this._focus = true\n    this.redraw()\n  }\n\n  blur(e) {\n    if (this._disabled) return\n    this._focus = false\n    this.redraw()\n  }\n\n  on(...args) {\n    this._canvas.addEventListener.apply(this._canvas, args)\n  }\n\n  addEventListener(...args) {\n    this._canvas.addEventListener.apply(this._canvas, args)\n  }\n\n  off(...args) {\n    this._canvas.removeEventListener.apply(this._canvas, args)\n  }\n\n  removeEventListener(...args) {\n    this._canvas.removeEventListener.apply(this._canvas, args)\n  }\n\n  set eventMode(val) {\n    this._eventMode = val\n  }\n  get eventMode() {\n    return this._eventMode\n  }\n\n  set selector(val) {\n    this._selector = val\n    this.parent = document.querySelector(this._selector)\n  }\n  get selector() {\n    return this._selector\n  }\n\n  set parent(val) {\n    this._parent = val\n    this._attachDomElement()\n  }\n  get parent() {\n    return this._parent\n  }\n\n  set value(val) {\n    if (this._value == val) return\n    this._value = clamp(val)\n    this.redraw()\n  }\n  get value() {\n    return this._value\n  }\n\n  set trackSector(val) {\n    if (this._trackSector == val) return\n    this._trackSector = val\n    this.redraw()\n  }\n  get trackSector() {\n    return this._trackSector\n  }\n\n  set target(val) {\n    if (this._target == val) return\n    this._target = clamp(val)\n    this.redraw()\n  }\n  get target() {\n    return this._target\n  }\n\n  set steps(val) {\n    if (this._steps == val) return\n    this._steps = Math.max(1,val)\n    this.redraw()\n  }\n  get steps() {\n    return this._steps\n  }\n\n  get step() {\n    return Math.floor(this._value * this._steps)\n  }\n\n  set step(val) {\n    this.value = val / this._steps\n  }\n\n  set neutralAngle(val) {\n    if (this._neutralAngle == val) return\n    this._neutralAngle = val\n    this.redraw()\n  }\n  get neutralAngle() {\n    return this._neutralAngle\n  }\n\n  set sizeFromParent(val) {\n    if (this._sizeFromParent == val) return\n    this._sizeFromParent = val\n    if (this._sizeFromParent) this.fitParent()\n  }\n  get sizeFromParent() {\n    return this._sizeFromParent\n  }\n\n  set width(val) {\n    if (this._width == val) return\n    this._width = val\n    this._resizeCanvas()\n  }\n  get width() {\n    return this._width\n  }\n\n  set height(val) {\n    if (this._height == val) return\n    this._height = val\n    this._resizeCanvas()\n  }\n  get height() {\n    return this._height\n  }\n\n  set speed(val) {\n    if (this._speed == val) return\n    this._speed = val\n  }\n  get speed() {\n    return this._speed\n  }\n\n  set targetSector(val) {\n    if (this._targetSector == val) return\n    this._targetSector = val\n    this.redraw()\n  }\n  get targetSector() {\n    return this._targetSector\n  }\n\n  set valueSector(val) {\n    if (this._valueSector == val) return\n    this._valueSector = val\n    this.redraw()\n  }\n  get valueSector() {\n    return this._valueSector\n  }\n\n  set stepGap(val) {\n    if (this._stepGap == val) return\n    this._stepGap = val\n    this.redraw()\n  }\n  get stepGap() {\n    return this._stepGap\n  }\n\n  set disabled(val) {\n    if (this._disabled == val) return\n    this._disabled = val\n    if (this._disabled && this._dragging) this.stopDrag()\n    if (this._disabled && this._focus) this.blur()\n    this.redraw()\n  }\n  get disabled() {\n    return this._disabled\n  }\n\n  set observeSize(val) {\n    if (this._observeSize == val) return\n    this._observeSize = val\n    if (this._observeSize) this._loop()\n  }\n  get observeSize() {\n    return observeSize\n  }\n\n  set borderRadius(val) {\n    if (this._borderRadius == val) return\n    this._borderRadius = val\n    this.redraw()\n  }\n  get borderRadius() {\n    return this._borderRadius\n  }\n\n  set trackSize(val) {\n    if (this._trackSize == val) return\n    this._trackSize = val\n    this.redraw()\n  }\n  get trackSize() {\n    return this._trackSize\n  }\n\n  set valueSectorColor(val) {\n    if (this._valueSectorColor == val) return\n    this._valueSectorColor = val\n    this.redraw()\n  }\n  get valueSectorColor() {\n    return this._valueSectorColor\n  }\n\n  set trackSectorColor(val) {\n    if (this._trackSectorColor == val) return\n    this._trackSectorColor = val\n    this.redraw()\n  }\n  get trackSectorColor() {\n    return this._trackSectorColor\n  }\n\n  set borderColor(val) {\n    if (this._borderColor == val) return\n    this._borderColor = val\n    this.redraw()\n  }\n  get borderColor() {\n    return this._borderColor\n  }\n\n  set borderFocusColor(val) {\n    if (this._borderFocusColor == val) return\n    this._borderFocusColor = val\n    this.redraw()\n  }\n  get borderFocusColor() {\n    return this._borderFocusColor\n  }\n\n  set backgroundColor(val) {\n    if (this._backgroundColor == val) return\n    this._backgroundColor = val\n    this.redraw()\n  }\n  get backgroundColor() {\n    return this._backgroundColor\n  }\n\n  set targetSectorColor(val) {\n    if (this._targetSectorColor == val) return\n    this._targetSectorColor = val\n    this.redraw()\n  }\n  get targetSectorColor() {\n    return this._targetSectorColor\n  }\n\n  get domElement() {\n    return this._canvas\n  }\n\n  fitParent() {\n    if (!this._parent) return\n    this._width = this._parent.offsetWidth\n    this._height =  this._parent.offsetHeight\n    this._resizeCanvas()\n  }\n\n  redraw() {\n    this._redraw = true\n    this._loop()\n  }\n\n  _resizeCanvas() {\n    this._canvasSize = Math.min(this._width, this._height)\n    this._radius =  this._canvasSize / 2.\n    this._centerX = this._centerY = this._radius\n    this.redraw()\n  }\n\n  _attachDomElement() {\n    if (this.parent && this._canvas) {\n      this._parent.appendChild(this._canvas)\n      this.fitParent()\n      this.redraw()\n    }\n  }\n\n  _evalMousePosition(e){\n    this._mouseX = e.touches ? e.touches[0].pageX : e.pageX\n    this._mouseY = e.touches ? e.touches[0].pageY : e.pageY\n    this._mouseAngle = calcAngle(\n      this._canvas.offsetLeft + this._canvasSize / 2,\n      this._canvas.offsetTop + this._canvasSize / 2,\n      this._mouseX,\n      this._mouseY\n    )\n    const zero = (this._neutralAngle - Math.PI)\n    const inverse = (TAU - (this._trackSector - this._valueSector)) / TAU\n    const fullCircle = mod(this._mouseAngle - zero, TAU) / TAU\n    const value = fullCircle\n      * (TAU / (this._trackSector - this._valueSector))\n      - (inverse + this._valueSector / 2) / 2\n\n    this._target = clamp(value)\n    this.redraw()\n  }\n\n  _dispatchChangeEvent() {\n    if (\n      this._eventMode === NONE\n      || (this._eventMode === VALUE && this._lastEventValue == this._value)\n      || (this._eventMode === TARGET && this._lastEventTarget == this._target)\n      || (this._eventMode === STEP && this._lastEventStep == this.step)\n      || (this._eventMode === COMPLETE && this._value != this._target)\n    ) return\n    this._canvas.dispatchEvent(\n      new CustomEvent(\n        'change',\n        {\n          bubbles: true,\n          detail: {\n            step: this.step,\n            value: this._value,\n            target: this._target,\n            component: this\n          }\n        }\n      )\n    )\n    this._lastEventValue = this._value\n    this._lastEventTarget = this._target\n    this._lastEventStep = this.step\n  }\n\n  _loop() {\n    if (\n      this._animationFrame\n      || (\n        !this._observeSize\n        && !this._dragging\n        && !this._redraw\n        && this._value == this._target\n      )\n    ) return\n    this._animationFrame = window.requestAnimationFrame(() => {\n      let render = this._dragging || this._redraw\n      if (this._value != this._target) {\n        if (this.speed <= 0) {\n          // speed lte 0 just set value\n          this._value = this._target\n        } else {\n          if (this._value + this._speed <= this._target ) {\n            this._value += this._speed\n          } else if (this._value- this._speed >= this._target ) {\n            this._value -= this._speed\n          } else {\n            this._value = this._target\n          }\n        }\n        render = true\n        this._dispatchChangeEvent()\n      }\n      if (\n        this._observeSize\n        && this._sizeFromParent\n        && (\n          this._parent.offsetWidth != this._width\n          || this._parent.offsetHeight != this._height\n        )\n      ) {\n        this.fitParent()\n        render = true\n      }\n      this._animationFrame = null\n      if (render) this._draw()\n      this._loop()\n    })\n  }\n\n  _draw() {\n    const ctx = this._ctx\n    const cx = this._centerX\n    const cy = this._centerY\n    const border = this._borderRadius\n    const trackSize = Math.min(this._radius/3, this._trackSize)\n    const zero = -this._trackSector/2 + this._neutralAngle\n    const limit = zero + this._trackSector\n    const delta = calcAngleDelta( zero,limit)\n    const target = this._target\n    const value = this._value\n\n    const outer = this._radius - border\n    const inner = this._radius - border - trackSize\n\n    if (\n      ctx.canvas.width != this._canvasSize\n      || ctx.canvas.height != this._canvasSize\n    ) {\n      ctx.canvas.width = ctx.canvas.height = this._canvasSize\n    } else {\n      ctx.clearRect(0, 0, this._canvasSize, this._canvasSize)\n    }\n\n\n\n    // background torus\n    ctx.save()\n    ctx.beginPath()\n    ctx.fillStyle = this._focus ? this._borderFocusColor : this._borderColor\n    ctx.arc(cx, cy, this._radius, 0, TAU)\n    ctx.arc(cx, cy, inner - border, 0, TAU, true)\n    ctx.clip()\n    ctx.fill()\n    ctx.restore()\n\n    // torus\n    ctx.fillStyle = this._backgroundColor\n    drawTorusSegment(ctx, cx, cy, outer, inner)\n    ctx.fill()\n\n    let start, end\n    if (this._steps < 2) {\n\n      // track\n      ctx.fillStyle = this._trackSectorColor\n      drawTorusSegment(ctx, cx, cy, outer, inner, zero, limit)\n      ctx.fill()\n\n      // target value indicator\n      if (value != target) {\n        start = target *((TAU + delta - this._targetSector)) + zero\n        end = start + this._targetSector\n        ctx.fillStyle = this._targetSectorColor\n        drawTorusSegment(ctx, cx, cy, outer, inner, start, end)\n        ctx.fill()\n      }\n\n      // current value indicator\n      start = value * (TAU + delta - this._valueSector) + zero\n      end = start + this._valueSector\n      ctx.fillStyle = this._valueSectorColor\n      drawTorusSegment(ctx, cx, cy, outer, inner, start, end)\n      ctx.fill()\n\n    } else {\n\n      const segmentSector = this._trackSector / this._steps\n      const stepScale = 1 / this._steps\n\n      // draw segment for every step\n      for (let i = 0; i < this._steps; i++) {\n        start = mod(zero + segmentSector * i, TAU) + this._stepGap\n        end = mod(zero + segmentSector * (i + 1), TAU) - this._stepGap\n        // segmented track\n        ctx.fillStyle = this._trackSectorColor\n        drawTorusSegment(ctx, cx, cy, outer, inner, start, end)\n        ctx.fill()\n        if (value >= i * stepScale && value <= (i + 1) * stepScale) {\n          // segment matches current value\n          ctx.fillStyle = this._valueSectorColor\n          drawTorusSegment(ctx, cx, cy, outer, inner, start, end)\n          ctx.fill()\n        } else if (value != target) {\n          if (target >= i * stepScale && target <= (i + 1) * stepScale) {\n            // current value neq target value segement matches selected step\n            ctx.fillStyle = this._targetSectorColor\n            drawTorusSegment(ctx, cx, cy, outer, inner, start, end)\n            ctx.fill()\n          }\n        }\n      }\n    }\n    this._redraw = false\n  }\n}\n"]}